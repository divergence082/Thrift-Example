<?php
namespace Example\Thrift\Types;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Статус участника диалога.
 */
final class SubjectStatus {
  const OFFLINE = 0;
  const ONLINE = 1;
  static public $__names = array(
    0 => 'OFFLINE',
    1 => 'ONLINE',
  );
}

/**
 * Состояние диалога.
 */
final class DialogState {
  const ENQUEUED = 0;
  const OPENED = 1;
  const CLOSED = 2;
  const REOPENED = 2;
  static public $__names = array(
    0 => 'ENQUEUED',
    1 => 'OPENED',
    2 => 'CLOSED',
    2 => 'REOPENED',
  );
}

/**
 * Субъект диалога.
 * 
 * id: уникальный идентификатор субъекта.
 * 
 * status: актуальный статус субъекта.
 * 
 * name: имя субъекта.
 * 
 * email: адрес электронной почты субъекта.
 * 
 * phone: номер контактного телефона субъекта.
 */
class Subject {
  static $_TSPEC;

  /**
   * @var string
   */
  public $subjectId = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $email = null;
  /**
   * @var string
   */
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'subjectId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['subjectId'])) {
        $this->subjectId = $vals['subjectId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
      if (isset($vals['phone'])) {
        $this->phone = $vals['phone'];
      }
    }
  }

  public function getName() {
    return 'Subject';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subjectId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Subject');
    if ($this->subjectId !== null) {
      $xfer += $output->writeFieldBegin('subjectId', TType::STRING, 1);
      $xfer += $output->writeString($this->subjectId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 4);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->phone !== null) {
      $xfer += $output->writeFieldBegin('phone', TType::STRING, 5);
      $xfer += $output->writeString($this->phone);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Диалог.
 * 
 * id: уникальный идентификатор диалога.
 * 
 * operatorId: идентификатор оператора.
 * 
 * visitorId: идентификатор посетителя.
 * 
 * state: состояние диалога.
 */
class Dialog {
  static $_TSPEC;

  /**
   * @var string
   */
  public $dialogId = null;
  /**
   * @var string
   */
  public $operatorId = null;
  /**
   * @var string
   */
  public $visitorId = null;
  /**
   * @var int
   */
  public $state = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dialogId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'operatorId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'visitorId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'state',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dialogId'])) {
        $this->dialogId = $vals['dialogId'];
      }
      if (isset($vals['operatorId'])) {
        $this->operatorId = $vals['operatorId'];
      }
      if (isset($vals['visitorId'])) {
        $this->visitorId = $vals['visitorId'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
    }
  }

  public function getName() {
    return 'Dialog';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dialogId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->operatorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->visitorId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Dialog');
    if ($this->dialogId !== null) {
      $xfer += $output->writeFieldBegin('dialogId', TType::STRING, 1);
      $xfer += $output->writeString($this->dialogId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->operatorId !== null) {
      $xfer += $output->writeFieldBegin('operatorId', TType::STRING, 2);
      $xfer += $output->writeString($this->operatorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->visitorId !== null) {
      $xfer += $output->writeFieldBegin('visitorId', TType::STRING, 3);
      $xfer += $output->writeString($this->visitorId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::I32, 4);
      $xfer += $output->writeI32($this->state);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Сообщение.
 * 
 * id: уникальный идентификатор сообщения.
 * 
 * dialogId: идентификатор диалога, в контексте которого создано сообщение.
 * 
 * senderId: идентификатор субъекта, создавшего сообщение.
 * 
 * text: текст сообщения.
 */
class Message {
  static $_TSPEC;

  /**
   * @var string
   */
  public $messageId = null;
  /**
   * @var string
   */
  public $dialogId = null;
  /**
   * @var string
   */
  public $senderId = null;
  /**
   * @var string
   */
  public $text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dialogId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'senderId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageId'])) {
        $this->messageId = $vals['messageId'];
      }
      if (isset($vals['dialogId'])) {
        $this->dialogId = $vals['dialogId'];
      }
      if (isset($vals['senderId'])) {
        $this->senderId = $vals['senderId'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
    }
  }

  public function getName() {
    return 'Message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dialogId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->senderId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Message');
    if ($this->messageId !== null) {
      $xfer += $output->writeFieldBegin('messageId', TType::STRING, 1);
      $xfer += $output->writeString($this->messageId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dialogId !== null) {
      $xfer += $output->writeFieldBegin('dialogId', TType::STRING, 2);
      $xfer += $output->writeString($this->dialogId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->senderId !== null) {
      $xfer += $output->writeFieldBegin('senderId', TType::STRING, 3);
      $xfer += $output->writeString($this->senderId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 4);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * Ошибка сервиса диалогов.
 * 
 * message: сообщение об ошибке.
 * 
 * code: код ошибки.
 */
class DialogError extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;
  /**
   * @var int
   */
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'DialogError';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DialogError');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I16, 2);
      $xfer += $output->writeI16($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SubjectStatus:
  """
  Статус участника диалога.
  """
  OFFLINE = 0
  ONLINE = 1

  _VALUES_TO_NAMES = {
    0: "OFFLINE",
    1: "ONLINE",
  }

  _NAMES_TO_VALUES = {
    "OFFLINE": 0,
    "ONLINE": 1,
  }

class DialogState:
  """
  Состояние диалога.
  """
  ENQUEUED = 0
  OPENED = 1
  CLOSED = 2
  REOPENED = 2

  _VALUES_TO_NAMES = {
    0: "ENQUEUED",
    1: "OPENED",
    2: "CLOSED",
    2: "REOPENED",
  }

  _NAMES_TO_VALUES = {
    "ENQUEUED": 0,
    "OPENED": 1,
    "CLOSED": 2,
    "REOPENED": 2,
  }


class Subject:
  """
  Субъект диалога.

  id: уникальный идентификатор субъекта.

  status: актуальный статус субъекта.

  name: имя субъекта.

  email: адрес электронной почты субъекта.

  phone: номер контактного телефона субъекта.

  Attributes:
   - subjectId
   - status
   - name
   - email
   - phone
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'subjectId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'phone', None, None, ), # 5
  )

  def __init__(self, subjectId=None, status=None, name=None, email=None, phone=None,):
    self.subjectId = subjectId
    self.status = status
    self.name = name
    self.email = email
    self.phone = phone

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.subjectId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phone = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Subject')
    if self.subjectId is not None:
      oprot.writeFieldBegin('subjectId', TType.STRING, 1)
      oprot.writeString(self.subjectId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 5)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.subjectId is None:
      raise TProtocol.TProtocolException(message='Required field subjectId is unset!')
    if self.status is None:
      raise TProtocol.TProtocolException(message='Required field status is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.email is None:
      raise TProtocol.TProtocolException(message='Required field email is unset!')
    if self.phone is None:
      raise TProtocol.TProtocolException(message='Required field phone is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.subjectId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.email)
    value = (value * 31) ^ hash(self.phone)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Dialog:
  """
  Диалог.

  id: уникальный идентификатор диалога.

  operatorId: идентификатор оператора.

  visitorId: идентификатор посетителя.

  state: состояние диалога.

  Attributes:
   - dialogId
   - operatorId
   - visitorId
   - state
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dialogId', None, None, ), # 1
    (2, TType.STRING, 'operatorId', None, None, ), # 2
    (3, TType.STRING, 'visitorId', None, None, ), # 3
    (4, TType.I32, 'state', None, None, ), # 4
  )

  def __init__(self, dialogId=None, operatorId=None, visitorId=None, state=None,):
    self.dialogId = dialogId
    self.operatorId = operatorId
    self.visitorId = visitorId
    self.state = state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dialogId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.operatorId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.visitorId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.state = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Dialog')
    if self.dialogId is not None:
      oprot.writeFieldBegin('dialogId', TType.STRING, 1)
      oprot.writeString(self.dialogId)
      oprot.writeFieldEnd()
    if self.operatorId is not None:
      oprot.writeFieldBegin('operatorId', TType.STRING, 2)
      oprot.writeString(self.operatorId)
      oprot.writeFieldEnd()
    if self.visitorId is not None:
      oprot.writeFieldBegin('visitorId', TType.STRING, 3)
      oprot.writeString(self.visitorId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 4)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.dialogId is None:
      raise TProtocol.TProtocolException(message='Required field dialogId is unset!')
    if self.operatorId is None:
      raise TProtocol.TProtocolException(message='Required field operatorId is unset!')
    if self.visitorId is None:
      raise TProtocol.TProtocolException(message='Required field visitorId is unset!')
    if self.state is None:
      raise TProtocol.TProtocolException(message='Required field state is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.dialogId)
    value = (value * 31) ^ hash(self.operatorId)
    value = (value * 31) ^ hash(self.visitorId)
    value = (value * 31) ^ hash(self.state)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Message:
  """
  Сообщение.

  id: уникальный идентификатор сообщения.

  dialogId: идентификатор диалога, в контексте которого создано сообщение.

  senderId: идентификатор субъекта, создавшего сообщение.

  text: текст сообщения.

  Attributes:
   - messageId
   - dialogId
   - senderId
   - text
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'messageId', None, None, ), # 1
    (2, TType.STRING, 'dialogId', None, None, ), # 2
    (3, TType.STRING, 'senderId', None, None, ), # 3
    (4, TType.STRING, 'text', None, None, ), # 4
  )

  def __init__(self, messageId=None, dialogId=None, senderId=None, text=None,):
    self.messageId = messageId
    self.dialogId = dialogId
    self.senderId = senderId
    self.text = text

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.messageId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.dialogId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.senderId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.text = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Message')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.STRING, 1)
      oprot.writeString(self.messageId)
      oprot.writeFieldEnd()
    if self.dialogId is not None:
      oprot.writeFieldBegin('dialogId', TType.STRING, 2)
      oprot.writeString(self.dialogId)
      oprot.writeFieldEnd()
    if self.senderId is not None:
      oprot.writeFieldBegin('senderId', TType.STRING, 3)
      oprot.writeString(self.senderId)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 4)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.messageId is None:
      raise TProtocol.TProtocolException(message='Required field messageId is unset!')
    if self.dialogId is None:
      raise TProtocol.TProtocolException(message='Required field dialogId is unset!')
    if self.senderId is None:
      raise TProtocol.TProtocolException(message='Required field senderId is unset!')
    if self.text is None:
      raise TProtocol.TProtocolException(message='Required field text is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageId)
    value = (value * 31) ^ hash(self.dialogId)
    value = (value * 31) ^ hash(self.senderId)
    value = (value * 31) ^ hash(self.text)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DialogError(TException):
  """
  Ошибка сервиса диалогов.

  message: сообщение об ошибке.

  code: код ошибки.

  Attributes:
   - message
   - code
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', None, None, ), # 1
    (2, TType.I16, 'code', None, None, ), # 2
  )

  def __init__(self, message=None, code=None,):
    self.message = message
    self.code = code

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.code = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DialogError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.I16, 2)
      oprot.writeI16(self.code)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    value = (value * 31) ^ hash(self.code)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

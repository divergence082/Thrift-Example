/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Example.Thrift.Types
{

  /// <summary>
  /// Субъект диалога.
  /// 
  /// id: уникальный идентификатор субъекта.
  /// 
  /// status: актуальный статус субъекта.
  /// 
  /// name: имя субъекта.
  /// 
  /// email: адрес электронной почты субъекта.
  /// 
  /// phone: номер контактного телефона субъекта.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Subject : TBase
  {

    public string SubjectId { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="SubjectStatus"/>
    /// </summary>
    public SubjectStatus Status { get; set; }

    public string Name { get; set; }

    public string Email { get; set; }

    public string Phone { get; set; }

    public Subject() {
    }

    public Subject(string subjectId, SubjectStatus status, string name, string email, string phone) : this() {
      this.SubjectId = subjectId;
      this.Status = status;
      this.Name = name;
      this.Email = email;
      this.Phone = phone;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_subjectId = false;
      bool isset_status = false;
      bool isset_name = false;
      bool isset_email = false;
      bool isset_phone = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SubjectId = iprot.ReadString();
              isset_subjectId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Status = (SubjectStatus)iprot.ReadI32();
              isset_status = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
              isset_name = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Email = iprot.ReadString();
              isset_email = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Phone = iprot.ReadString();
              isset_phone = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_subjectId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_status)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_name)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_email)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_phone)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Subject");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "subjectId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SubjectId);
      oprot.WriteFieldEnd();
      field.Name = "status";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Status);
      oprot.WriteFieldEnd();
      field.Name = "name";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
      field.Name = "email";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Email);
      oprot.WriteFieldEnd();
      field.Name = "phone";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Phone);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Subject(");
      __sb.Append(", SubjectId: ");
      __sb.Append(SubjectId);
      __sb.Append(", Status: ");
      __sb.Append(Status);
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Email: ");
      __sb.Append(Email);
      __sb.Append(", Phone: ");
      __sb.Append(Phone);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

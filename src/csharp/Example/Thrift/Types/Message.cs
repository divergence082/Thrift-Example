/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Example.Thrift.Types
{

  /// <summary>
  /// Сообщение.
  /// 
  /// id: уникальный идентификатор сообщения.
  /// 
  /// dialogId: идентификатор диалога, в контексте которого создано сообщение.
  /// 
  /// senderId: идентификатор субъекта, создавшего сообщение.
  /// 
  /// text: текст сообщения.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Message : TBase
  {

    public string MessageId { get; set; }

    public string DialogId { get; set; }

    public string SenderId { get; set; }

    public string Text { get; set; }

    public Message() {
    }

    public Message(string messageId, string dialogId, string senderId, string text) : this() {
      this.MessageId = messageId;
      this.DialogId = dialogId;
      this.SenderId = senderId;
      this.Text = text;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_messageId = false;
      bool isset_dialogId = false;
      bool isset_senderId = false;
      bool isset_text = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MessageId = iprot.ReadString();
              isset_messageId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DialogId = iprot.ReadString();
              isset_dialogId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SenderId = iprot.ReadString();
              isset_senderId = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
              isset_text = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_messageId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_dialogId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_senderId)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_text)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Message");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "messageId";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(MessageId);
      oprot.WriteFieldEnd();
      field.Name = "dialogId";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DialogId);
      oprot.WriteFieldEnd();
      field.Name = "senderId";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(SenderId);
      oprot.WriteFieldEnd();
      field.Name = "text";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Text);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Message(");
      __sb.Append(", MessageId: ");
      __sb.Append(MessageId);
      __sb.Append(", DialogId: ");
      __sb.Append(DialogId);
      __sb.Append(", SenderId: ");
      __sb.Append(SenderId);
      __sb.Append(", Text: ");
      __sb.Append(Text);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

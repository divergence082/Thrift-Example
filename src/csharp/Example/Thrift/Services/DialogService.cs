/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Example.Thrift.Services
{
  public partial class DialogService {
    /// <summary>
    /// Сервис диалогов.
    /// </summary>
    public interface Iface {
      /// <summary>
      /// Открытие диалога.
      /// 
      /// @param subjectId - идентификатор субъекта диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия указанного субъекта.
      /// </summary>
      /// <param name="subjectId"></param>
      Example.Thrift.Types.Dialog open(string subjectId);
      #if SILVERLIGHT
      IAsyncResult Begin_open(AsyncCallback callback, object state, string subjectId);
      Example.Thrift.Types.Dialog End_open(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Переоткрытие диалога.
      /// 
      /// @param dialogId - идентификатор диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия указанного диалога
      ///   или если субъект не являлся участником диалога.
      /// </summary>
      /// <param name="dialogId"></param>
      Example.Thrift.Types.Dialog reopen(string dialogId);
      #if SILVERLIGHT
      IAsyncResult Begin_reopen(AsyncCallback callback, object state, string dialogId);
      Example.Thrift.Types.Dialog End_reopen(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Закрытие диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия диалога.
      /// </summary>
      Example.Thrift.Types.DialogState close();
      #if SILVERLIGHT
      IAsyncResult Begin_close(AsyncCallback callback, object state);
      Example.Thrift.Types.DialogState End_close(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Отправка текстового сообщения.
      /// 
      /// @param text - текст сообщения.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия текущего диалога.
      /// </summary>
      /// <param name="text"></param>
      Example.Thrift.Types.Message sendTextMessage(string text);
      #if SILVERLIGHT
      IAsyncResult Begin_sendTextMessage(AsyncCallback callback, object state, string text);
      Example.Thrift.Types.Message End_sendTextMessage(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// Сервис диалогов.
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_open(AsyncCallback callback, object state, string subjectId)
      {
        return send_open(callback, state, subjectId);
      }

      public Example.Thrift.Types.Dialog End_open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_open();
      }

      #endif

      /// <summary>
      /// Открытие диалога.
      /// 
      /// @param subjectId - идентификатор субъекта диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия указанного субъекта.
      /// </summary>
      /// <param name="subjectId"></param>
      public Example.Thrift.Types.Dialog open(string subjectId)
      {
        #if !SILVERLIGHT
        send_open(subjectId);
        return recv_open();

        #else
        var asyncResult = Begin_open(null, null, subjectId);
        return End_open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_open(AsyncCallback callback, object state, string subjectId)
      #else
      public void send_open(string subjectId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("open", TMessageType.Call, seqid_));
        open_args args = new open_args();
        args.SubjectId = subjectId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Example.Thrift.Types.Dialog recv_open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        open_result result = new open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_reopen(AsyncCallback callback, object state, string dialogId)
      {
        return send_reopen(callback, state, dialogId);
      }

      public Example.Thrift.Types.Dialog End_reopen(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_reopen();
      }

      #endif

      /// <summary>
      /// Переоткрытие диалога.
      /// 
      /// @param dialogId - идентификатор диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия указанного диалога
      ///   или если субъект не являлся участником диалога.
      /// </summary>
      /// <param name="dialogId"></param>
      public Example.Thrift.Types.Dialog reopen(string dialogId)
      {
        #if !SILVERLIGHT
        send_reopen(dialogId);
        return recv_reopen();

        #else
        var asyncResult = Begin_reopen(null, null, dialogId);
        return End_reopen(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_reopen(AsyncCallback callback, object state, string dialogId)
      #else
      public void send_reopen(string dialogId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("reopen", TMessageType.Call, seqid_));
        reopen_args args = new reopen_args();
        args.DialogId = dialogId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Example.Thrift.Types.Dialog recv_reopen()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        reopen_result result = new reopen_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reopen failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close(AsyncCallback callback, object state)
      {
        return send_close(callback, state);
      }

      public Example.Thrift.Types.DialogState End_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_close();
      }

      #endif

      /// <summary>
      /// Закрытие диалога.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия диалога.
      /// </summary>
      public Example.Thrift.Types.DialogState close()
      {
        #if !SILVERLIGHT
        send_close();
        return recv_close();

        #else
        var asyncResult = Begin_close(null, null);
        return End_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close(AsyncCallback callback, object state)
      #else
      public void send_close()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close", TMessageType.Call, seqid_));
        close_args args = new close_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Example.Thrift.Types.DialogState recv_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_result result = new close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "close failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sendTextMessage(AsyncCallback callback, object state, string text)
      {
        return send_sendTextMessage(callback, state, text);
      }

      public Example.Thrift.Types.Message End_sendTextMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sendTextMessage();
      }

      #endif

      /// <summary>
      /// Отправка текстового сообщения.
      /// 
      /// @param text - текст сообщения.
      /// 
      /// @throws DialogError - ошибка сервиса диалогов.
      ///   Может возникать в случае отсутствия текущего диалога.
      /// </summary>
      /// <param name="text"></param>
      public Example.Thrift.Types.Message sendTextMessage(string text)
      {
        #if !SILVERLIGHT
        send_sendTextMessage(text);
        return recv_sendTextMessage();

        #else
        var asyncResult = Begin_sendTextMessage(null, null, text);
        return End_sendTextMessage(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sendTextMessage(AsyncCallback callback, object state, string text)
      #else
      public void send_sendTextMessage(string text)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sendTextMessage", TMessageType.Call, seqid_));
        sendTextMessage_args args = new sendTextMessage_args();
        args.Text = text;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Example.Thrift.Types.Message recv_sendTextMessage()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sendTextMessage_result result = new sendTextMessage_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendTextMessage failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["open"] = open_Process;
        processMap_["reopen"] = reopen_Process;
        processMap_["close"] = close_Process;
        processMap_["sendTextMessage"] = sendTextMessage_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        open_args args = new open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        open_result result = new open_result();
        try {
          result.Success = iface_.open(args.SubjectId);
        } catch (Example.Thrift.Types.DialogError error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("open", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void reopen_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        reopen_args args = new reopen_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        reopen_result result = new reopen_result();
        try {
          result.Success = iface_.reopen(args.DialogId);
        } catch (Example.Thrift.Types.DialogError error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("reopen", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_args args = new close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_result result = new close_result();
        try {
          result.Success = iface_.close();
        } catch (Example.Thrift.Types.DialogError error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sendTextMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sendTextMessage_args args = new sendTextMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sendTextMessage_result result = new sendTextMessage_result();
        try {
          result.Success = iface_.sendTextMessage(args.Text);
        } catch (Example.Thrift.Types.DialogError error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("sendTextMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_args : TBase
    {
      private string _subjectId;

      public string SubjectId
      {
        get
        {
          return _subjectId;
        }
        set
        {
          __isset.subjectId = true;
          this._subjectId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool subjectId;
      }

      public open_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                SubjectId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SubjectId != null && __isset.subjectId) {
          field.Name = "subjectId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SubjectId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_args(");
        bool __first = true;
        if (SubjectId != null && __isset.subjectId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("SubjectId: ");
          __sb.Append(SubjectId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class open_result : TBase
    {
      private Example.Thrift.Types.Dialog _success;
      private Example.Thrift.Types.DialogError _error;

      public Example.Thrift.Types.Dialog Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Example.Thrift.Types.DialogError Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public open_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Example.Thrift.Types.Dialog();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new Example.Thrift.Types.DialogError();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("open_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("open_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reopen_args : TBase
    {
      private string _dialogId;

      public string DialogId
      {
        get
        {
          return _dialogId;
        }
        set
        {
          __isset.dialogId = true;
          this._dialogId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dialogId;
      }

      public reopen_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DialogId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reopen_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DialogId != null && __isset.dialogId) {
          field.Name = "dialogId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DialogId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reopen_args(");
        bool __first = true;
        if (DialogId != null && __isset.dialogId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DialogId: ");
          __sb.Append(DialogId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class reopen_result : TBase
    {
      private Example.Thrift.Types.Dialog _success;
      private Example.Thrift.Types.DialogError _error;

      public Example.Thrift.Types.Dialog Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Example.Thrift.Types.DialogError Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public reopen_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Example.Thrift.Types.Dialog();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new Example.Thrift.Types.DialogError();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("reopen_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("reopen_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_args : TBase
    {

      public close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_result : TBase
    {
      private Example.Thrift.Types.DialogState _success;
      private Example.Thrift.Types.DialogError _error;

      /// <summary>
      /// 
      /// <seealso cref="Example.Thrift.Types.DialogState"/>
      /// </summary>
      public Example.Thrift.Types.DialogState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Example.Thrift.Types.DialogError Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (Example.Thrift.Types.DialogState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new Example.Thrift.Types.DialogError();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("close_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendTextMessage_args : TBase
    {
      private string _text;

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
      }

      public sendTextMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendTextMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendTextMessage_args(");
        bool __first = true;
        if (Text != null && __isset.text) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Text: ");
          __sb.Append(Text);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sendTextMessage_result : TBase
    {
      private Example.Thrift.Types.Message _success;
      private Example.Thrift.Types.DialogError _error;

      public Example.Thrift.Types.Message Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Example.Thrift.Types.DialogError Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public sendTextMessage_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Example.Thrift.Types.Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new Example.Thrift.Types.DialogError();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("sendTextMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sendTextMessage_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package example.thrift.types;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Диалог.
 * 
 * id: уникальный идентификатор диалога.
 * 
 * operatorId: идентификатор оператора.
 * 
 * visitorId: идентификатор посетителя.
 * 
 * state: состояние диалога.
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-06-18")
public class Dialog implements org.apache.thrift.TBase<Dialog, Dialog._Fields>, java.io.Serializable, Cloneable, Comparable<Dialog> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Dialog");

  private static final org.apache.thrift.protocol.TField DIALOG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dialogId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VISITOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("visitorId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DialogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DialogTupleSchemeFactory());
  }

  public String dialogId; // required
  public String operatorId; // required
  public String visitorId; // required
  /**
   * 
   * @see DialogState
   */
  public DialogState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DIALOG_ID((short)1, "dialogId"),
    OPERATOR_ID((short)2, "operatorId"),
    VISITOR_ID((short)3, "visitorId"),
    /**
     * 
     * @see DialogState
     */
    STATE((short)4, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIALOG_ID
          return DIALOG_ID;
        case 2: // OPERATOR_ID
          return OPERATOR_ID;
        case 3: // VISITOR_ID
          return VISITOR_ID;
        case 4: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIALOG_ID, new org.apache.thrift.meta_data.FieldMetaData("dialogId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "DialogId")));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "SubjectId")));
    tmpMap.put(_Fields.VISITOR_ID, new org.apache.thrift.meta_data.FieldMetaData("visitorId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "SubjectId")));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DialogState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Dialog.class, metaDataMap);
  }

  public Dialog() {
  }

  public Dialog(
    String dialogId,
    String operatorId,
    String visitorId,
    DialogState state)
  {
    this();
    this.dialogId = dialogId;
    this.operatorId = operatorId;
    this.visitorId = visitorId;
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Dialog(Dialog other) {
    if (other.isSetDialogId()) {
      this.dialogId = other.dialogId;
    }
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
    if (other.isSetVisitorId()) {
      this.visitorId = other.visitorId;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public Dialog deepCopy() {
    return new Dialog(this);
  }

  @Override
  public void clear() {
    this.dialogId = null;
    this.operatorId = null;
    this.visitorId = null;
    this.state = null;
  }

  public String getDialogId() {
    return this.dialogId;
  }

  public Dialog setDialogId(String dialogId) {
    this.dialogId = dialogId;
    return this;
  }

  public void unsetDialogId() {
    this.dialogId = null;
  }

  /** Returns true if field dialogId is set (has been assigned a value) and false otherwise */
  public boolean isSetDialogId() {
    return this.dialogId != null;
  }

  public void setDialogIdIsSet(boolean value) {
    if (!value) {
      this.dialogId = null;
    }
  }

  public String getOperatorId() {
    return this.operatorId;
  }

  public Dialog setOperatorId(String operatorId) {
    this.operatorId = operatorId;
    return this;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public void setOperatorIdIsSet(boolean value) {
    if (!value) {
      this.operatorId = null;
    }
  }

  public String getVisitorId() {
    return this.visitorId;
  }

  public Dialog setVisitorId(String visitorId) {
    this.visitorId = visitorId;
    return this;
  }

  public void unsetVisitorId() {
    this.visitorId = null;
  }

  /** Returns true if field visitorId is set (has been assigned a value) and false otherwise */
  public boolean isSetVisitorId() {
    return this.visitorId != null;
  }

  public void setVisitorIdIsSet(boolean value) {
    if (!value) {
      this.visitorId = null;
    }
  }

  /**
   * 
   * @see DialogState
   */
  public DialogState getState() {
    return this.state;
  }

  /**
   * 
   * @see DialogState
   */
  public Dialog setState(DialogState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIALOG_ID:
      if (value == null) {
        unsetDialogId();
      } else {
        setDialogId((String)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;

    case VISITOR_ID:
      if (value == null) {
        unsetVisitorId();
      } else {
        setVisitorId((String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((DialogState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIALOG_ID:
      return getDialogId();

    case OPERATOR_ID:
      return getOperatorId();

    case VISITOR_ID:
      return getVisitorId();

    case STATE:
      return getState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIALOG_ID:
      return isSetDialogId();
    case OPERATOR_ID:
      return isSetOperatorId();
    case VISITOR_ID:
      return isSetVisitorId();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Dialog)
      return this.equals((Dialog)that);
    return false;
  }

  public boolean equals(Dialog that) {
    if (that == null)
      return false;

    boolean this_present_dialogId = true && this.isSetDialogId();
    boolean that_present_dialogId = true && that.isSetDialogId();
    if (this_present_dialogId || that_present_dialogId) {
      if (!(this_present_dialogId && that_present_dialogId))
        return false;
      if (!this.dialogId.equals(that.dialogId))
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }

    boolean this_present_visitorId = true && this.isSetVisitorId();
    boolean that_present_visitorId = true && that.isSetVisitorId();
    if (this_present_visitorId || that_present_visitorId) {
      if (!(this_present_visitorId && that_present_visitorId))
        return false;
      if (!this.visitorId.equals(that.visitorId))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_dialogId = true && (isSetDialogId());
    list.add(present_dialogId);
    if (present_dialogId)
      list.add(dialogId);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_visitorId = true && (isSetVisitorId());
    list.add(present_visitorId);
    if (present_visitorId)
      list.add(visitorId);

    boolean present_state = true && (isSetState());
    list.add(present_state);
    if (present_state)
      list.add(state.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Dialog other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDialogId()).compareTo(other.isSetDialogId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialogId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialogId, other.dialogId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVisitorId()).compareTo(other.isSetVisitorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVisitorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visitorId, other.visitorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Dialog(");
    boolean first = true;

    sb.append("dialogId:");
    if (this.dialogId == null) {
      sb.append("null");
    } else {
      sb.append(this.dialogId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorId:");
    if (this.operatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("visitorId:");
    if (this.visitorId == null) {
      sb.append("null");
    } else {
      sb.append(this.visitorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dialogId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dialogId' was not present! Struct: " + toString());
    }
    if (operatorId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'operatorId' was not present! Struct: " + toString());
    }
    if (visitorId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'visitorId' was not present! Struct: " + toString());
    }
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DialogStandardSchemeFactory implements SchemeFactory {
    public DialogStandardScheme getScheme() {
      return new DialogStandardScheme();
    }
  }

  private static class DialogStandardScheme extends StandardScheme<Dialog> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Dialog struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIALOG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dialogId = iprot.readString();
              struct.setDialogIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorId = iprot.readString();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VISITOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.visitorId = iprot.readString();
              struct.setVisitorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = example.thrift.types.DialogState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Dialog struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dialogId != null) {
        oprot.writeFieldBegin(DIALOG_ID_FIELD_DESC);
        oprot.writeString(struct.dialogId);
        oprot.writeFieldEnd();
      }
      if (struct.operatorId != null) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeString(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.visitorId != null) {
        oprot.writeFieldBegin(VISITOR_ID_FIELD_DESC);
        oprot.writeString(struct.visitorId);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DialogTupleSchemeFactory implements SchemeFactory {
    public DialogTupleScheme getScheme() {
      return new DialogTupleScheme();
    }
  }

  private static class DialogTupleScheme extends TupleScheme<Dialog> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Dialog struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.dialogId);
      oprot.writeString(struct.operatorId);
      oprot.writeString(struct.visitorId);
      oprot.writeI32(struct.state.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Dialog struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.dialogId = iprot.readString();
      struct.setDialogIdIsSet(true);
      struct.operatorId = iprot.readString();
      struct.setOperatorIdIsSet(true);
      struct.visitorId = iprot.readString();
      struct.setVisitorIdIsSet(true);
      struct.state = example.thrift.types.DialogState.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
    }
  }

}

